class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
    std::vector<std::vector<int>> result;
        int n = nums.size();

        if (n < 4) {
            return result;
        }

        std::sort(nums.begin(), nums.end());

        for (int i = 0; i < n - 3; ++i) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }

            for (int j = i + 1; j < n - 2; ++j) {
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }

                int left = j + 1, right = n - 1;

                while (left < right) {
                    long long sum = static_cast<long long>(nums[i]) +
                                    static_cast<long long>(nums[j]) +
                                    static_cast<long long>(nums[left]) +
                                    static_cast<long long>(nums[right]);

                    if (sum == target) {
                        result.push_back({nums[i], nums[j], nums[left], nums[right]});

                        while (left < right && nums[left] == nums[left + 1]) {
                            left++;
                        }
                        while (left < right && nums[right] == nums[right - 1]) {
                            right--;
                        }

                        left++;
                        right--;
                    } else if (sum < target) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }

        return result;
    }


int main() {
    Solution solution;
    std::vector<int> nums = {1, 0, -1, 0, -2, 2}; // Example input array
    int target = 0;

    std::vector<std::vector<int>> result = solution.fourSum(nums, target);
    for (const std::vector<int>& quad : result) {
        for (int num : quad) {
            std::cout << num << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}
};
