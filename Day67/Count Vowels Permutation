class Solution {
public:
    int countVowelPermutation(int n) {
     const int MOD = 1000000007;
        
        // Define a 2D array dp, where dp[i][j] represents the number of valid strings of length i ending with the vowel j.
        vector<vector<long long>> dp(n + 1, vector<long long>(5, 0));
        
        // Initialize the base case for strings of length 1.
        for (int j = 0; j < 5; ++j) {
            dp[1][j] = 1;
        }
        
        // Transition rules:
        // - 'a' can follow 'e' or 'i' only.
        // - 'e' can follow 'a' or 'i'.
        // - 'i' can follow any vowel.
        // - 'o' can follow 'i' or 'u'.
        // - 'u' can follow 'a' only.
        
        for (int i = 2; i <= n; ++i) {
            dp[i][0] = (dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][4]) % MOD; // 'a'
            dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % MOD; // 'e'
            dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % MOD; // 'i'
            dp[i][3] = dp[i - 1][2]; // 'o'
            dp[i][4] = (dp[i - 1][2] + dp[i - 1][3]) % MOD; // 'u'
        }
        
        // Sum all valid strings of length n ending with each vowel.
        long long ans = 0;
        for (int j = 0; j < 5; ++j) {
            ans = (ans + dp[n][j]) % MOD;
        }
        
        return static_cast<int>(ans);   
    }
};
